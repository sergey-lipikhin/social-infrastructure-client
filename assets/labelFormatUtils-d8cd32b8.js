import{s as y,gs as h,b7 as m,gt as v,ae as d,gu as w,gv as b,f0 as x,gw as _,gx as E}from"./index-a6c97245.js";const p=y.getLogger("esri.layers.support.labelFormatUtils"),g={type:"simple",evaluate:()=>null},F={getAttribute:(a,n)=>a.field(n)};async function A(a,n,r){if(!a||!a.symbol||!n)return g;const s=a.where,l=h(a),i=s?await m(()=>import("./WhereClause-46f9e1f1.js").then(e=>e.W),["assets/WhereClause-46f9e1f1.js","assets/index-a6c97245.js","assets/index-a3fce6eb.css"]):null;let o;if(l.type==="arcade"){const e=await v(l.expression,r,n);if(e==null)return g;o={type:"arcade",evaluate(u){try{const t=e.evaluate({$feature:"attributes"in u?e.repurposeFeature(u):u},e.services);if(t!=null)return t.toString()}catch(t){p.error(new d("arcade-expression-error","Encountered an error when evaluating label expression for feature",{error:t,feature:u,expression:l}))}return null},needsHydrationToEvaluate:()=>E(l.expression)==null}}else o={type:"simple",evaluate:e=>l.expression.replaceAll(/{[^}]*}/g,u=>{const t=u.slice(1,-1),c=n.get(t);if(!c)return u;let f=null;return"attributes"in e?e&&e.attributes&&(f=e.attributes[c.name]):f=e.field(c.name),f==null?"":$(f,c)})};if(s){let e;try{e=i.WhereClause.create(s,n)}catch(t){return p.error(new d("bad-where-clause","Encountered an error when evaluating where clause, ignoring",{where:s,error:t})),g}const u=o.evaluate;o.evaluate=t=>{const c="attributes"in t?void 0:F;try{if(e.testFeature(t,c))return u(t)}catch(f){p.error(new d("bad-where-clause","Encountered an error when evaluating where clause for feature",{where:s,feature:t,error:f}))}return null}}return o}function $(a,n){if(a==null)return"";const r=n.domain;if(r){if(r.type==="codedValue"||r.type==="coded-value"){const l=a;for(const i of r.codedValues)if(i.code===l)return i.name}else if(r.type==="range"){const l=+a,i="range"in r?r.range[0]:r.minValue,o="range"in r?r.range[1]:r.maxValue;if(i<=l&&l<=o)return r.name}}let s=a;return n.type==="date"||n.type==="esriFieldTypeDate"?s=w(s,b("short-date")):x(n)&&(s=_(+s)),s||""}export{A as createLabelFunction,$ as formatField};
