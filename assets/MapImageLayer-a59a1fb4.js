import{fp as w,fD as $,ft as I,fE as O,fr as T,fs as E,fu as M,fq as R,fF as L,fG as F,aF as N,fv as P,d1 as v,aL as f,fH as j,ag as g,aE as J,fI as q,fJ as U,fK as k,ae as b,m as A,u as i,v as n,fL as x,bT as _,fM as z,fz as V,w as D,bd as G,fN as H}from"./index-a6c97245.js";import{E as K,f as B,Y as C}from"./SublayersOwner-d3977194.js";import{m as W}from"./ExportImageParameters-9404eb92.js";import{t as Y}from"./imageBitmapUtils-601fc81f.js";import{e as S}from"./sublayerUtils-19951619.js";import"./QueryTask-dd73f125.js";import"./executeForIds-d3dd01a9.js";import"./executeQueryPBF-5a51464f.js";import"./floorFilterUtils-080a7cd2.js";let s=class extends w($(I(K(B(O(T(E(M(R(L(F(N(G))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,a){return typeof e=="string"?{url:e,...a}:e}load(e){const a=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(P).then(()=>this._fetchService(a))),Promise.resolve(this)}readImageFormat(e,a){const p=a.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,a,p,t){var d;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let l=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((d=this.capabilities.exportMap)!=null&&d.supportsDynamicLayers)){const r=v(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;l=S(o,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");l=S(o,c.sublayers,v(c.origin))}}const m=[],h={writeSublayerStructure:l,...t};let y=l;o.forEach(r=>{const c=r.write({},h);m.push(c),y=y||r.originOf("visible")==="user"}),m.some(r=>Object.keys(r).length>1)&&(a.layers=m),y&&(a.visibleLayers=o.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,a,p,t){const o=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new W({layer:this,floors:t==null?void 0:t.floors,scale:j({extent:e,width:a})*o}),m=l.toJSON();l.destroy();const h=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},y=e&&e.spatialReference,d=y.wkid||JSON.stringify(y.toJSON());m.dpi*=o;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:d,imageSR:d,size:a+","+p,...m,...h,...r}}async fetchImage(e,a,p,t){const{data:o}=await this._fetchImage("image",e,a,p,t);return o}async fetchImageBitmap(e,a,p,t){const{data:o,url:l}=await this._fetchImage("blob",e,a,p,t);return Y(o,l,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const a={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await g(this.url,a),{extent:t,fullExtent:o,timeExtent:l}=p,m=t||o;return{fullExtent:m&&J.fromJSON(m),timeExtent:l&&q.fromJSON({start:l[0],end:l[1]})}}loadAll(){return U(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return k(this,e)}async _fetchImage(e,a,p,t,o){var h,y,d;const l={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(a,p,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((h=l.query)==null?void 0:h.dynamicLayers)!=null&&!((d=(y=this.capabilities)==null?void 0:y.exportMap)!=null&&d.supportsDynamicLayers))throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});try{const{data:r}=await g(m,l);return{data:r,url:m}}catch(r){throw A(r)?r:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:a,ssl:p}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=a,this.read(a,{origin:"service",url:this.parsedUrl})}};i([n({type:x})],s.prototype,"dateFieldsTimeReference",void 0),i([n({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),i([n()],s.prototype,"dpi",void 0),i([n()],s.prototype,"gdbVersion",void 0),i([n()],s.prototype,"imageFormat",void 0),i([_("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),i([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),i([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),i([n()],s.prototype,"imageTransparency",void 0),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),i([n({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),i([n({type:x})],s.prototype,"preferredTimeReference",void 0),i([n()],s.prototype,"sourceJSON",void 0),i([n({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),i([z("sublayers",{layers:{type:[C]},visibleLayers:{type:[H]}})],s.prototype,"writeSublayers",null),i([n({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),i([n({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),i([n(V)],s.prototype,"url",void 0),s=i([D("esri.layers.MapImageLayer")],s);const oe=s;export{oe as default};
