import{hK as f,cg as h,ce as g,u as x,w as E,bE as p,bi as v,cb as m}from"./index-a6c97245.js";import{v as y,b as L,j as V}from"./lineSegment-e0d341b8.js";import{_ as j,z as _,Q as b}from"./sphere-812d69dd.js";import{W as C}from"./Octree-3004e05b.js";import{m as P}from"./edgeProcessing-62c6eee5.js";import"./mat3f64-221ce671.js";import"./mat4f64-65d35099.js";import"./quatf64-3363c48e.js";import"./plane-f0d62c60.js";import"./InterleavedLayout-ddec9a00.js";import"./BufferView-c58f8e7f.js";import"./types-1305598a.js";import"./deduplicate-058a0b05.js";import"./Indices-b766e722.js";import"./VertexAttribute-9f2e53ec.js";import"./glUtil-0b7ee6ea.js";import"./enums-b14466b3.js";import"./VertexElementDescriptor-2925c6af.js";const S=1e3;function $(t,o,e){const n=j(),i=_(n);return f(i,i,t,.5),f(i,i,o,.5),n[3]=h(i,t),g(i,i,e),n}let l=class{constructor(){this._idToComponent=new Map,this._components=new C(t=>t.bounds),this._edges=new C(t=>t.bounds),this._tmpLineSegment=y(),this._tmpP1=p(),this._tmpP2=p(),this._tmpP3=p(),this.remoteClient=null}async fetchCandidates(t,o){await Promise.resolve(),v(o),await this._ensureEdgeLocations(t,o);const e=[];return this._edges.forEachNeighbor(n=>(this._addCandidates(t,n,e),e.length<S),t.bounds),{result:{candidates:e}}}async _ensureEdgeLocations(t,o){const e=[];if(this._components.forEachNeighbor(s=>{if(s.info==null){const{id:c,uid:d}=s;e.push({id:c,uid:d})}return!0},t.bounds),!e.length)return;const n={components:e},i=await this.remoteClient.invoke("fetchAllEdgeLocations",n,o??{});for(const s of i.components)this._setFetchEdgeLocations(s)}async add(t){const o=new u(t.id,t.bounds);return this._idToComponent.set(o.id,o),this._components.add([o]),{result:{}}}async remove(t){const o=this._idToComponent.get(t.id);if(o){const e=[];this._edges.forEachNeighbor(n=>(n.component===o&&e.push(n),!0),o.bounds),this._edges.remove(e),this._components.remove([o]),this._idToComponent.delete(o.id)}return{result:{}}}_setFetchEdgeLocations(t){const o=this._idToComponent.get(t.id);if(o==null||t.uid!==o.uid)return;const e=P.createView(t.locations),n=new Array(e.count),i=p(),s=p();for(let r=0;r<e.count;r++){e.position0.getVec(r,i),e.position1.getVec(r,s);const a=$(i,s,t.origin),w=new I(o,r,a);n[r]=w}this._edges.add(n);const{objectIds:c,origin:d}=t;o.info={locations:e,objectIds:c,origin:d}}_addCandidates(t,o,e){const{info:n}=o.component,{origin:i,objectIds:s}=n,c=n.locations,d=c.position0.getVec(o.index,this._tmpP1),r=c.position1.getVec(o.index,this._tmpP2);g(d,d,i),g(r,r,i);const a=s[c.componentIndex.get(o.index)];this._addEdgeCandidate(t,a,d,r,e),this._addVertexCandidate(t,a,d,e),this._addVertexCandidate(t,a,r,e)}_addEdgeCandidate(t,o,e,n,i){if(!t.returnEdge)return;const s=_(t.bounds),c=L(e,n,this._tmpLineSegment),d=V(c,s,this._tmpP3);b(t.bounds,d)&&i.push({type:"edge",objectId:o,target:m(d),distance:h(s,d),start:m(e),end:m(n)})}_addVertexCandidate(t,o,e,n){if(!t.returnVertex)return;const i=_(t.bounds);b(t.bounds,e)&&n.push({type:"vertex",objectId:o,target:m(e),distance:h(i,e)})}};l=x([E("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],l);const U=l;class u{constructor(o,e){this.id=o,this.bounds=e,this.info=null,this.uid=++u.uid}}u.uid=0;class I{constructor(o,e,n){this.component=o,this.index=e,this.bounds=n}}export{U as default};
